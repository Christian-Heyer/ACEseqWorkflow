# ACEseq brawl implementation
import de.dkfz.b080.co.aceseq.*
import de.dkfz.b080.co.files.*

input bamControlMerged
input  bamTumorMerged

runflag runWithDelly default true
runflag runQualityCheckOnly default false
runflag runMetaCNVGeneration default false
runflag runWithFakeControl default false

set resultByType
if runMetaCNVGeneration; then
  resultByType = call bamTumorMerged.generateCNVSNPsMeta(bamControlMerged)
  return true
else
  resultByType = call bamTumorMerged.generateCNVSNPs(bamControlMerged)
fi

# TODO The annotate job tool id is not visible in the jobstate logfile.
set annotationResult = call resultByType.getCoverageWindowsFiles().annotate()

set replaceControlFile;
set mergedAndFilteredCoverageWindowFiles;

if runWithFakeControl; then
  replaceControlFile = call ACESeqMethods.replaceControl(annotationResult.genderFile)
  mergedAndFilteredCoverageWindowFiles = call "mergeAndFilterCnvFiles_withReplaceBadControl"(replaceControlFile, new GenericFileGroup(annotationResult.listOfFiles))
else
  mergedAndFilteredCoverageWindowFiles = call annotationResult.mergeAndFilterCoverageWindowFiles()
fi

set correctedWindowFile = call ACESeqMethods.correctGC(mergedAndFilteredCoverageWindowFiles)

if runQualityCheckOnly; then
    return true;
fi

set imputedGenotypeByChromosome = call bamControlMerged.imputeGenotypes()
set mergedAndFilteredSNPFile = call resultByType.getPositionFiles().mergeAndFilter()
set phasedGenotypeX = call bamControlMerged.imputeGenotypeX(annotationResult.getGenderFile())
set haplotypedSNPFile = call ACESeqMethods.addHaploTypes(mergedAndFilteredSNPFile, imputedGenotypeByChromosome.getPhasedSnpFiles(), phasedGenotypeX.value0)
set breakpoints = call ACESeqMethods.pscbsGaps(haplotypedSNPFile, (TextFile)correctedWindowFile.value0, annotationResult.getGenderFile())
set mergedSvs

if runWithDelly; then
  mergedSvs = call ACESeqMethods.mergeDelly(breakpoints.value0)
else
  mergedSvs = call ACESeqMethods.mergeCrest(breakpoints.value0 )
fi

if ! mergedSvs ; then
  return true
fi

set pscbsSegments = call ACESeqMethods.getSegmentAndGetSnps(mergedSvs.value0, breakpoints.value1)
set homoDelSegments = call ACESeqMethods.markSegsWithHomozygDel(pscbsSegments, mergedSvs.value1)
set homoDelSnps = call ACESeqMethods.segsToSnpDataHomodel(homoDelSegments, breakpoints.value1 )
set clusteredSegments = call ACESeqMethods.clusterPruneSegments(homoDelSegments, homoDelSnps, annotationResult.getGenderFile(), (TextFile)correctedWindowFile.value1, imputedGenotypeByChromosome.getHaploblockFiles(), phasedGenotypeX.value1)
set clusteredSnps = call ACESeqMethods.segsToSnpDataPruned(clusteredSegments.value0, clusteredSegments.value1)
set peakSegments = call ACESeqMethods.estimatePeaks(clusteredSegments.value0, clusteredSnps, annotationResult.getGenderFile())
set purityPloidy = call ACESeqMethods.estimatePurityPloidy(peakSegments, annotationResult.getGenderFile())
set results = call ACESeqMethods.generatePlots(peakSegments, clusteredSnps, mergedSvs.value1, purityPloidy, annotationResult.getGenderFile())
set finalVcf = call ACESeqMethods.convertToVcf(results)
