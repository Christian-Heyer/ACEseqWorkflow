#!/usr/bin/env perl

use strict;
use warnings;
use v5.10;

use List::Util qw(sum);

use constant DEBUG => 0; # set to 1 and it will also print mappability-file lines

my %opts;
my @standardColnames;

BEGIN {
  use Getopt::Long;
  %opts = ('tabix_bin' => 'tabix',	  
 #'bgzip_bin' => 'bgzip',
	   'bFileType' => 'vcf',
	   'padding' => 0,
	   'maxBorderDistanceSum' => -1, # negative values in one of these disable this filter
	   'minOverlapFraction' => -1,   # CAVE: it is one filter --- both conditions are connected by OR#	   'reportLevel' => 2 # 1: exact or position or all; 2: exact or all; 3: all
	  );

 GetOptions(  'a=s' => \$opts{segments},
	      'b=s' => \$opts{mappabilityFile},
	      'padding:i' => \$opts{padding},
	      'tabix_bin:s' => \$opts{tabix_bin},
	      #'bgzip_bin:s' => \$opts{bgzip_bin},
	      'bAdditionalColumns:s' => \$opts{mappabilityColumns},
	      'minOverlapFraction:f' => \$opts{min_overlap_frac},
	      'maxBorderDistanceSum:i' => \$opts{max_border_distance_sum},
	      'mappabilityFileType:s' => \$opts{mappabilityFileType},
	      'reportLevel:i' => \$opts{reportLevel}
	    );


  ### Process user input and check validity
  
  $opts{mappabilityFileType} = lc($opts{mappabilityFileType});

  my %valid_mappabilityFileTypes = ( 'vcf' => 1,
			   'bed' => 1,
			 );
  $valid_mappabilityFileTypes{$opts{mappabilityFileType}} || die "Only mappability-files of type ". join(" ", sort keys %valid_mappabilityFileTypes). " are supported";



  ### Now make constants
  require constant;
  for (keys %opts) {
    constant->import(uc($_), $opts{$_});
  }
  constant->import('COLUMNNAME', 'MAP');
}

if (BFILETYPE eq 'vcf') {
  @standardColnames = qw(CHROM POS ID REF ALT QUAL FILTER INFO);
} else {
  @standardColnames = qw(chrom chromStart chromEnd name);
}



open(SEG, "$opts{segments}") || die "Could not open segments-file $opts{segments}\n";

# guess mappability file chr format ## TODO: this does not work in every case
my ($map_chr_prefix, $map_chr_suffix);
open(GUESS, TABIX_BIN . " -l $opts{mappabilityFile} | ");
while (<GUESS>) {
  chomp;
  if (/([^\d]*)\d+(.*)/) {
    $map_chr_prefix = $1;
    $map_chr_suffix = $2;
    last;
  }
}
close GUESS;
$map_chr_prefix = '' if (! defined($map_chr_prefix));
$map_chr_suffix = '' if (! defined($map_chr_suffix));


# get mappability-file column names
my @map_colnames;
my $map_header_cmd = TABIX_BIN() . " -h $opts{mappabilityFile} $map_chr_prefix" . '1' . $map_chr_suffix . ":0-0 | tail -n1";
my $map_header = `$map_header_cmd`;
if ($map_header =~ s/^\#CHROM/CHROM/ || $map_header =~ s/^\#chrom/chrom/) {
  @map_colnames = split(/\t/);
} else {
  # no header; give standard col names
  @map_colnames =  @standardColnames;
}

my $newcolidx;
my %seg_fields;
my @map_fields;
my @seg_columns;
my @map_columns;
@map_columns = split(',',$opts{mappabilityColumns}) if (defined($opts{mappabilityColumns}));
my $chr='';
my $chr_raw = '';

my $header = <SEG>;
chomp $header;
@seg_columns = qw(CHROM tcnId dhId START END tcnNbrOfLoci tcnMean tcnNbrOfSNPs tcnNbrOfHets dhNbrOfLoci dhMean c1Mean c2Mean);
push @seg_columns, COLUMNNAME();

my @matches;
my $seg_line;
my $map_line;
my %map_lines;
my $map_fh;
my $next_map_line;

my ($seg_left, $seg_right);
my $chr_changed;
my $map_linectr = 0; # need this as hash key
my $map_linenr;
my ($ol_left, $ol_right, $ol_length, $ol_frac);
my ($dist_left, $dist_right);
my $alt;

SEGFILE_LOOP: while ($seg_line=<SEG>) {
  @matches = ();
  chomp($seg_line);
  @seg_fields{@seg_columns} = split(/\s/, $seg_line);
  if ($seg_fields{CHROM} ne $chr_raw) {
    $chr_changed = 1;
    $chr_raw = $seg_fields{CHROM};
    $chr = $chr_raw =~ s/[^\dXY]*([\dXY]+).*/$1/r;
  } else {
    $chr_changed = 0;
  }
  $seg_left = $seg_fields{START};
  $seg_right = $seg_fields{END};
 
  if ($chr_changed) {
    %map_lines = ();
    $next_map_line = {};
    close $map_fh if (ref($map_fh));
    open $map_fh, TABIX_BIN . " $opts{mappabilityFile} ${map_chr_prefix}${chr}${map_chr_suffix} |" or die "opening b file $opts{mappabilityFile} with tabix failed";
    $map_linectr = 0;
  }
  if (! defined($next_map_line->{left}) || $next_map_line->{left}-PADDING() <= $seg_right) {
    # read new map_lines until we have one where the left coordinate is higher than seg_right + pad
    while ($map_line=<$map_fh>) {
      if (defined($next_map_line->{left})) {
	$map_lines{$map_linectr} = $next_map_line;
	$next_map_line = {};
      }
      chomp($map_line);
      DEBUG && say $map_line;
      $map_linectr++;
      @map_fields = split(/\t/, $map_line);
      ($map_fields[0] eq $map_chr_prefix.$chr.$map_chr_suffix) || die "Chromosomes between tumor and germline file do not match: $map_fields[0] ne ${map_chr_prefix}${chr}${map_chr_suffix}";
      if (BFILETYPE eq 'vcf') { ### mappability-file is vcf file
	$next_map_line->{left} =  $map_fields[1];
        $next_map_line->{ref}=$map_fields[3];
        $next_map_line->{alt}=$map_fields[4];
        $next_map_line->{report} = 'POS='.$next_map_line->{left}.';';
        if ($map_fields[7] =~ /END=(\d+)/) {
          $next_map_line->{right} = $1;
        } else {
          $next_map_line->{right} = $next_map_line->{left} + length($next_map_line->{ref});
          $next_map_line->{report} .= 'END='.$next_map_line->{right}.';';
        }
        $next_map_line->{report} .= join ';', (map { $map_colnames[$_] . '=' .$map_fields[$_] } @map_columns), $map_fields[7];
      } else { ### map-file is bed file
	$next_map_line->{left} =  $map_fields[1] + 1;
        $next_map_line->{ref} = 'NA';
        $next_map_line->{alt} = 'NA';
	$next_map_line->{right} = $map_fields[2];
	$next_map_line->{map} = $map_fields[3];
      }
      last if ($next_map_line->{left}-PADDING() > $seg_right);
    }
  }
  # Now compare seg_line to all map_lines in map_lines hash
 B_LINE_LOOP: foreach $map_linenr (sort keys %map_lines) {
    if ( $map_lines{$map_linenr}{right}+PADDING() < $seg_left ) {
      delete($map_lines{$map_linenr});
      next;
    }
    if ( $map_lines{$map_linenr}{left}-PADDING() > $seg_right ) {
      next;
    }
    if ($map_lines{$map_linenr}{left} <= $seg_right  && $map_lines{$map_linenr}{right} >= $seg_left) {
      $ol_left = ($map_lines{$map_linenr}{left} > $seg_left) ? $map_lines{$map_linenr}{left} : $seg_left;
      $ol_right = ($map_lines{$map_linenr}{right} < $seg_right) ? $map_lines{$map_linenr}{right} : $seg_right;
      $ol_length = $ol_right - $ol_left + 1;
      push(@matches, $ol_length * $map_lines{$map_linenr}{map});
    } 

  }
  $seg_fields{COLUMNNAME()} = sum(@matches);
  $seg_fields{COLUMNNAME()} = 0 if (! defined($seg_fields{COLUMNNAME()}));

  say join "\t", @seg_fields{@seg_columns};
} # SEGFILE_LOOP
close SEG;
close $map_fh if (ref($map_fh));
